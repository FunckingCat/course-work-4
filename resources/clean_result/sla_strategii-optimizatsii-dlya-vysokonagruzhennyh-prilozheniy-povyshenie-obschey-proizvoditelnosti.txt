Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 233 _______________________________ 
УДК 004 
Филисов Д.А. 
руководитель команды разработки Grid Dynamics 
(г. Белград, Сербия) 
 
СТРАТЕГИИ ОПТИМИЗАЦИИ  
ДЛЯ ВЫСОКОНАГРУЖЕННЫХ ПРИЛОЖЕНИЙ:  
ПОВЫШЕНИЕ ОБЩЕЙ ПРОИЗВОДИТЕЛЬНОСТИ 
 
Аннотация: в данной статье подробно рассматриваются стратегии оптимизации 
для высоконагруженных приложений, имеющие решающее значение для повышения 
эффективности общей производительности. В условиях быстро растущей базы цифровых 
пользователей высоконагруженные приложения - те, которые могут обрабатывать от 
тысяч до миллионов запросов в минуту, - требуют точной настройки для удовлетворения 
растущего спроса. Также рассматриваются различные методы оптимизации и стратегии, 
необходимые для повышения производительности этих высоконагруженных приложений. 
Вначале анализируется важность оптимизации кода, от написания эффективных 
алгоритмов до использования правильных структур данных, подчеркивая ее влияние на 
снижение вычислительной сложности приложений. Далее обсуждается актуальность 
оптимизации базы данных и исследуются такие методы, как индексация, кэширование и 
оптимизация запросов, которые играют жизненно важную роль в увеличении времени 
отклика базы данных, а, следовательно, и производительности приложения. Также 
рассматривается 
влияние 
эффективной 
балансировки 
нагрузки 
на 
эффективное 
распределение сетевого трафика и, следовательно, предотвращение перегрузок системы. 
Подробно обсуждаются современные инструменты, такие как Prometheus, New Relic и 
Datadog, проливающие свет на их преобразующую роль в мониторинге и оптимизации 
производительности приложений. Благодаря этим аспектам оптимизации приложений в 
статье представлено подробное руководство по совершенствованию высоконагруженных 
приложений, направленное на обеспечение того, чтобы они удовлетворяли потребности 
пользователей эффективно, действенно и надежно. 
 
Ключевые 
слова: 
высоконагруженные 
приложения, 
оптимизация 
производительности, оптимизация кода, оптимизация базы данных, балансировка нагрузки, 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 234 _______________________________ 
оптимизация аппаратного уровня, эффективность алгоритмов, структуры данных, 
индексация, кэширование, оптимизация запросов, сетевой трафик, использование ресурсов, 
конфигурация сервера. 
 
Введение 
Высоконагруженные 
приложения, 
в 
просторечии 
называемые 
приложениями "больших данных", становятся все более распространенными в 
современном цифровом ландшафте. Отличаясь способностью обрабатывать 
огромное количество запросов одновременно, эти приложения представляют 
собой уникальный набор задач и возможностей для оптимизации. 
Термин "высоконагруженный" обычно относится к программным 
приложениям, способным обслуживать тысячи, если не миллионы запросов в 
секунду. Они могут охватывать широкий спектр областей, от платформ 
социальных сетей, сайтов электронной коммерции и многопользовательских 
онлайн-игр до сложных финансовых торговых систем и не только. 
Масштабируемость таких приложений имеет первостепенное значение для их 
производительности, требуя эффективного управления и распределения 
вычислительных ресурсов для обеспечения непрерывности обслуживания, а 
также бесперебойного взаимодействия с пользователем [1]. 
Оптимизация высоконагруженных приложений - это многомерная 
проблема, требующая тонкого понимания не только основных функциональных 
возможностей приложения, но и внешних систем, с которыми оно 
взаимодействует. Включает в себя глубокие знания различных вычислительных 
парадигм, структур данных, алгоритмов, систем баз данных и сетевых 
протоколов. Более того, понимание взаимосвязи между этими элементами 
является ключом к разработке эффективных стратегий оптимизации [2]. 
Цель статьи - предоставить всесторонний обзор различных методов, 
используемых при оптимизации высоконагруженных приложений. Эти методы 
варьируются от низкоуровневой оптимизации систем баз данных посредством 
индексации и денормализации до стратегий более высокого уровня, таких как 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 235 _______________________________ 
кэширование, оптимизация на уровне приложений, управление параллелизмом и 
балансировка нагрузки. Данный методы представлены в рамках, которые 
подчеркивают их практическое применение, с различными примерами 
кодирования для облегчения более четкого понимания. 
 
Оптимизация базы данных 
В основе многих высоконагруженных приложений лежит надежная и 
высокоэффективная система баз данных. Задача таких систем - хранить, 
извлекать и манипулировать огромными объемами данных в режиме реального 
времени. Следовательно, оптимизация производительности базы данных может 
привести к значительному повышению общей производительности приложения. 
В этом разделе будут рассмотрены две ключевые стратегии оптимизации базы 
данных, а именно индексация и денормализация, и представлены примеры 
кодирования, иллюстрирующие их реализацию [3]. 
1. Индексация 
Индексация - это метод оптимизации базы данных, который повышает 
скорость поиска данных. Подобно указателю в книге, который помогает быстро 
найти конкретную информацию, не читая всю книгу целиком, индекс базы 
данных позволяет системе управления базами данных (СУБД) быстро находить 
запрашиваемые данные, не просматривая каждую строку в таблице. 
Приведенный ниже пример кода демонстрирует создание индекса в 
Django ORM: 
 
 
 
В этом фрагменте кода определяется пользовательская модель в системе 
объектно-реляционного отображения (ORM) Django. Атрибут db_index=True в 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 236 _______________________________ 
поле электронной почты создает индекс для этого поля в основной базе данных. 
Следовательно, любые запросы, которые фильтруют или упорядочивают по 
электронной почте, будут выполняться значительно быстрее, поскольку СУБД 
может использовать индекс для эффективного поиска совпадающих записей. 
2. Денормализация 
Хотя нормализация базы данных имеет решающее значение для 
минимизации избыточности данных и улучшения целостности данных, это 
может привести к сложным запросам с несколькими таблицами, которые могут 
снизить производительность. Денормализация - это стратегия, используемая для 
противодействия этому путем добавления избыточных данных или группировки 
в базе данных. Сохраняя дополнительные копии данных или группируя их, 
чтобы избежать объединения таблиц, база данных может быстрее выполнять 
операции чтения. 
Однако денормализация сопряжена с компромиссами. Хоть это ускоряет 
операции чтения, но также может замедлить операции записи, поскольку для 
обновления может потребоваться изменить данные в нескольких местах. Что 
может увеличить сложность проектирования базы данных и риск возникновения 
аномалий. Поэтому следует тщательно продумать, когда и где использовать 
денормализацию. 
Приведенная ниже инструкция SQL иллюстрирует денормализованную 
таблицу: 
 
 
 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 237 _______________________________ 
В этом примере таблица «Заказов» включает поле «Общая сумма заказа», 
которое является избыточным, поскольку общая сумма заказа может быть 
рассчитана по отдельным позициям заказа в отдельной таблице. Однако, 
сохраняя общую сумму заказа, база данных может быстро получить общую 
сумму без необходимости каждый раз суммировать отдельные позиции, что 
повышает производительность. 
В заключение, хотя методы оптимизации базы данных, такие как 
индексация и денормализация, могут значительно повысить производительность 
высоконагруженного 
приложения, 
их 
следует 
использовать 
разумно. 
Разработчики должны сбалансировать преимущества более быстрого извлечения 
данных с потенциальными недостатками, такими как повышенная сложность и 
риск аномалий данных. 
 
Кэширование 
Кэширование - это стратегия, которая повышает эффективность в 
высоконагруженных 
приложениях 
за 
счет 
минимизации 
затрат 
на 
дорогостоящие операции. Сохраняя результат таких операций или часто 
запрашиваемые данные в кэше, будущие запросы на те же данные могут 
выполняться быстрее, что снижает нагрузку на базу данных или вычислительные 
ресурсы. 
1. Кэш Redis 
Redis (сервер удаленных словарей) является популярным выбором для 
кэширования в высоконагруженных приложениях. Redis - это хранилище данных 
в памяти. Оно хранит данные непосредственно в памяти, что приводит к 
быстрым операциям чтения и записи. Хотя Redis в первую очередь известен как 
хранилище ключей и значений, он также поддерживает сложные типы данных, 
такие как списки, наборы и хэш-карты, что делает его универсальным 
инструментом в арсенале разработчика. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 238 _______________________________ 
Ниже представлен пример того, как Redis можно использовать для 
кэширования в приложении на Python: 
 
 
В приведенном коде сначала устанавливается соединение с сервером 
Redis с помощью redis.Конструктор Redis(). Затем метод set() используется для 
сохранения пары ключ-значение в хранилище Redis. Последующие запросы на 
эти данные могут быть быстро выполнены с помощью метода get(), который 
извлекает данные, связанные с предоставленным ключом. 
Используя Redis, можно значительно сократить время, затрачиваемое на 
извлечение данных, особенно для операций, которые в противном случае 
потребовали бы дорогостоящих вычислений или запросов к базе данных. 
Однако, хотя кэширование повышает производительность, важно учитывать его 
ограничения и потенциальные подводные камни, например, необходимость 
надлежащего управления аннулированием кэша. 
2. Аннулирование кэша 
Аннулирование кэша относится к процессу удаления устаревших или 
нежелательных данных из кэша. Это становится решающим, когда данные в 
кэше обновляются или удаляются из базы данных. В таких случаях 
невозможность аннулировать кэш может привести к тому, что приложение будет 
обслуживать устаревшие данные. 
Хотя сам Redis по своей сути не предоставляет функций аннулирования 
кэша, его можно запрограммировать для обработки аннулирования с 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 239 _______________________________ 
использованием таких методов, как истечение срока действия, основанное на 
времени.  
Ниже представлен пример кода аннулирования кэша: 
 
 
В этом коде вместо set() используется метод settext(). Метод settext() 
принимает дополнительный параметр, который определяет время истечения 
срока действия ключа. В этом случае ключ будет автоматически удален из Redis 
через 300 секунд (5 минут). 
Данный метод может гарантировать, что кэш не будет обслуживать 
устаревшие данные, но он не всегда идеален. Если данные в базе изменятся до 
истечения срока действия ключа кэша, кэш все равно может обслуживать 
устаревшие данные. Следовательно, необходимы тщательное рассмотрение и 
планирование для выбора наилучшей стратегии аннулирования кэша каждого 
варианта использования. 
 
Оптимизация на уровне приложений 
Помимо внешних систем и сервисов, можно получить значительные 
выгоды от оптимизации внутренней работы приложения. В данном разделе 
описана возможность, как повысить производительность приложения на уровне 
кода. Это включает в себя оптимизацию выбранных структур данных и 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 240 _______________________________ 
алгоритмов, 
сокращение 
объема 
ненужных 
вычислений, 
эффективное 
управление памятью и многое другое. 
1. Использование эффективных структур данных и алгоритмов 
Выбор правильной структуры данных или алгоритма для задачи может 
существенно повлиять на производительность приложения. Например, если 
возникает необходимость проверить, существует ли элемент в коллекции, 
структура данных set становится лучшим выбором, чем список, поскольку set 
может выполнять эту операцию быстрее. 
Ниже представлен пример на Python, который демонстрирует разницу: 
 
 
 
В этом коде происходит сравнение использования списка и набора для 
проверки наличия элемента. В то время как список должен перебирать свои 
элементы, пока не найдет нужный (что занимает O(n) времени), набор может 
выполнить ту же операцию гораздо быстрее (приблизительно O (1) раз), 
поскольку он основан на хэш-таблице. 
2. Сокращение ненужных вычислений 
Другой важный аспект оптимизации на уровне приложения связан с 
минимизацией ненужных вычислений. Данная функция включает в себя 
определение вычислений, которые можно использовать повторно, и сохранение 
их результатов, вместо того чтобы пересчитывать их каждый раз. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 241 _______________________________ 
Ниже представлен пример, в котором производится оптимизация 
вычисления последовательности Фибоначчи, используя метод, известный как 
запоминание: 
 
 
В данной функции используется словарь под названием memo для 
сохранения чисел Фибоначчи по мере их вычисления. Прежде чем вычислять 
число Фибоначчи для заданного n, сначала проверяется, сохранено ли оно уже в 
memo. Если это так, сохраненный результат возвращается, экономя время и 
вычислительные ресурсы, которые потребовались бы для его повторного 
вычисления. Этот метод значительно повышает эффективность функции, 
особенно при больших входных данных. 
Стоит отметить, что оптимизация кода часто предполагает компромисс 
между эффективностью во времени и пространстве. Поэтому разработчикам 
необходимо досконально разбираться в этих компромиссах, чтобы принимать 
обоснованные решения. 
 
Управление параллелизмом 
Управление параллелизмом - важнейшая стратегия оптимизации 
высоконагруженных 
приложений. 
Включает 
в 
себя 
управление 
одновременными 
операциями 
таким 
образом, 
чтобы 
обеспечить 
согласованность и корректность данных, а также повысить производительность 
приложения [4]. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 242 _______________________________ 
1. Многопоточность 
Одним из распространенных методов достижения параллелизма является 
многопоточность. Многопоточность позволяет одному процессу выполнять 
несколько 
потоков 
параллельно, 
увеличивая 
использование 
ресурсов 
центрального процессора и повышая производительность приложения. 
Приведенный ниже код на Python демонстрирует создание и выполнение 
двух потоков: 
 
 
 
В этом примере происходит определение двух функций: print_numbers() 
и print_letters(). Затем каждая функция назначается отдельному потоку. Метод 
start() инициирует каждый поток, который начинает выполнять свои 
соответствующие функции одновременно. Метод join() гарантирует, что 
основная программа дождется завершения обоих потоков, прежде чем 
продолжить. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 243 _______________________________ 
Хотя многопоточность может значительно повысить производительность 
приложения, она также создает потенциальные проблемы, такие как условия 
гонки, взаимоблокировки и другие проблемы с синхронизацией. Поэтому при 
внедрении многопоточности требуется тщательное рассмотрение и надлежащее 
управление. 
2. Блокировки 
Блокировки - это механизм, используемый для управления доступом к 
общим ресурсам в многопоточной среде. Они гарантируют, что, когда один 
поток обращается к определенному ресурсу, другие потоки не могут получить к 
нему доступ до тех пор, пока первый не снимет блокировку. 
Ниже представлен пример использования блокировок в Python: 
 
 
В данном коде уже есть общий ресурс (shared_resource), который будет 
пытаться увеличить несколько потоков. Используя блокировку, есть гарантия, 
что только один поток одновременно может увеличивать общий ресурс, 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 244 _______________________________ 
предотвращая 
условия 
гонки. 
Оператор 
with 
lock: 
используется 
для 
автоматического получения и снятия блокировки, гарантируя, что блокировка 
будет снята, даже если внутри блока возникнет ошибка. 
Хотя блокировки могут помочь справиться с проблемами параллелизма, 
они также могут привести к другим проблемам, таким как взаимоблокировка или 
конфликты. Поэтому важно разумно использовать блокировки и рассмотреть 
другие методы синхронизации, такие как семафоры или переменные условия, в 
зависимости от требований приложения. 
 
Балансировка нагрузки 
Балансировка нагрузки - это метод, используемый для равномерного 
распределения нагрузки между несколькими серверами или процессами. Что 
помогает 
повысить 
производительность 
и 
надежность 
приложений, 
предотвращая превращение какого-либо отдельного сервера в узкое место, тем 
самым делая систему более устойчивой к условиям высокой нагрузки. 
1. Обратный прокси-сервер 
Одним из простейших способов реализации балансировки нагрузки 
является использование обратного прокси-сервера. Данный сервер распределяет 
входящие запросы по нескольким внутренним серверам, распределяя нагрузку 
между ними. Одним из популярных вариантов использования обратного проксисервера является Nginx. 
Ниже представлен пример конфигурации, демонстрирующий, как Nginx 
можно настроить для распределения входящего трафика между двумя 
внутренними серверами: 
 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 245 _______________________________ 
 
 
В этой конфигурации директива upstream используется для определения 
группы внутренних серверов. Директива proxy_pass внутри блока location 
перенаправляет входящие запросы на внутренние серверы. Nginx по умолчанию 
использует алгоритм циклического планирования, поэтому он чередует 
backend1.example.com и backend2.example.com для каждого входящего запроса. 
2. Сохранение сеанса 
Хотя равномерное распределение запросов важно, в определенных 
приложениях крайне важно, чтобы все запросы от одного клиента отправлялись 
на один и тот же внутренний сервер. Данный метод необходим, когда 
приложение поддерживает информацию о состоянии по нескольким запросам от 
одного и того же пользователя. 
В примере ниже представлено, как можно изменить конфигурацию Nginx, 
чтобы обеспечить сохранение сеанса: 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 246 _______________________________ 
 
 
Директива ip_hash предписывает Nginx хэшировать IP-адрес клиента и 
использовать хэш для определения того, на какой внутренний сервер отправлять 
запросы клиента. Это гарантирует, что все запросы от одного и того же клиента 
будут перенаправлены на один и тот же сервер. 
В заключение, балансировка нагрузки может значительно повысить 
производительность и надежность высоконагруженных приложений. Однако 
используемые методы и инструменты зависят от конкретных потребностей 
приложения. Кроме того, разработчики должны тщательно следить за нагрузкой 
на каждый сервер, чтобы убедиться, что нагрузка распределяется равномерно, и 
корректировать свою стратегию по мере необходимости. 
 
Мониторинг и анализ высоконагруженных приложений 
В заключительном разделе статьи было бы полезно обсудить важность 
мониторинга и анализа производительности высоконагруженных приложений. 
Мониторинг производительности позволяет разработчикам выявлять узкие 
места и проверять, дают ли их усилия по оптимизации желаемый эффект. Более 
того, визуальное представление данных о производительности может помочь в 
понимании поведения системы и передаче информации о нем. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 247 _______________________________ 
 
Инструменты мониторинга 
Существуют различные доступные инструменты, которые могут 
отслеживать производительность приложения, собирать данные и предоставлять 
графические интерфейсы для анализа этих данных: 
1. 
Prometheus. Решение для мониторинга с открытым исходным 
кодом, которое может собирать широкий спектр показателей и предоставляет 
мощный язык запросов для анализа этих показателей. Prometheus также хорошо 
интегрируется с Grafana, инструментом для создания информационных панелей 
на основе данных Prometheus [5].  
К основным компонентам системы Prometheus относятся: 
● 
Сервер Prometheus: основной компонент, который обрабатывает и 
хранит данные временных рядов. 
● 
Клиентские 
библиотеки: 
Они 
используются 
для 
инструментирования кода приложения и предлагают четыре основных типа 
показателей: счетчик, датчик, гистограмма и сводка. 
● 
Pushgateway: Для поддержки кратковременных рабочих мест. 
Позволяет эфемерным и пакетным заданиям предоставлять свои показатели 
Prometheus. Метрики передаются на шлюз, а затем сервер Prometheus извлекает 
метрики из этого шлюза. 
● 
Экспортеры: Они используются для предоставления метрик из 
сторонних систем в качестве метрик Prometheus. Включает в себя такие системы, 
как HAProxy, StatsD, Graphite и т.д. 
● 
Alertmanager: Он обрабатывает оповещения, отправляемые сервером 
Prometheus, и заботится о дедупликации, группировке и маршрутизации их к 
правильным интеграциям получателей, таким как электронная почта, PagerDuty 
или OpsGenie. Также заботится о заглушении и подавлении предупреждений. 
● 
Обнаружение 
служб: 
Prometheus 
поддерживает 
несколько 
механизмов обнаружения служб для динамического обнаружения целевых 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 248 _______________________________ 
объектов очистки. Включает в себя такие механизмы, как файловый, Kubernetes, 
DNS-based, Consul и т.д. 
● 
Веб-интерфейс и API: Встроенный браузер выражений используется 
для визуализации данных и тестирования выражений для языка запросов 
Prometheus (PromQL). Пользователи также могут использовать эти данные 
программно через HTTP API. 
● 
Хранилище: Prometheus включает в себя локальную базу данных 
временных рядов на диске, но также опционально интегрируется с удаленными 
системами хранения. 
● 
PromQL: Это родной язык запросов Prometheus, используемый для 
выбора и агрегирования данных временных рядов в режиме реального времени 
или на основе записанных данных. 
Объединяя эти компоненты, Prometheus предоставляет гибкую и мощную 
платформу для сбора и анализа показателей для контролируемых систем и 
приложений. 
Prometheus получает показатели из инструментированных заданий либо 
напрямую, либо через промежуточный push-шлюз для выполнения эфемерных 
задач. Он поддерживает все очищенные выборки локально и выполняет правила 
над этими данными либо для агрегирования и записи новых временных рядов, 
на основе существующих данных, либо для генерации предупреждений. 
Визуализации скомпилированных данных могут быть созданы с помощью 
Grafana или других пользователей API. 
 
 
 
 
 
 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 249 _______________________________ 
Ниже представлена схема, которая иллюстрирует архитектуру Prometheus 
и некоторые компоненты его экосистемы: 
 
 
Рисунок 1. Компоненты архитектуры Prometheus 
Figure 1. Prometheus architecture components 
 
2. 
New Relic. Комплексная облачная платформа для наблюдения, 
используемая для отслеживания и анализа производительности приложений [6]. 
Он предоставляет широкий спектр услуг и функциональных возможностей, 
помогающих в мониторинге, устранении неполадок и оптимизации приложений, 
включая: 
● 
Мониторинг 
производительности 
приложений 
(APM): 
APM 
обеспечивает мониторинг и отслеживание производительности приложений в 
режиме реального времени. Он может измерять такие показатели, как время 
отклика, пропускная способность и частота ошибок. APM также предоставляет 
информацию о производительности внешних служб, вызываемых вашим 
приложением. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 250 _______________________________ 
● 
Мониторинг пользователей в режиме реального времени (RUM): Эта 
функция помогает понять пользовательский опыт, фиксируя и анализируя 
каждую транзакцию каждого пользователя в режиме реального времени. 
● 
Мониторинг инфраструктуры: New Relic предоставляет показатели 
работоспособности и данные о производительности ваших хостов, облачных 
сервисов и центров обработки данных в режиме реального времени. 
● 
Бессерверный мониторинг: Эта функция предоставляет информацию 
о бессерверных архитектурах, таких как функции AWS Lambda, включая 
шаблоны вызовов, холодные запуски и ошибки функций. 
● 
Синтетический мониторинг: Синтетический мониторинг позволяет 
вам проактивно тестировать производительность и функциональность вашего 
приложения путем создания имитируемых пользовательских потоков и 
сценариев. 
● 
Распределенная трассировка: New Relic предлагает распределенную 
трассировку, которая поможет вам понять, как проходит запрос через вашу 
сложную архитектуру микросервисов. 
● 
Оповещения и AIOps: New Relic Alerts - это гибкая централизованная 
система оповещения, которая раскрывает оперативный потенциал New Relic. 
Искусственный интеллект New Relic, известный как New Relic AI, обеспечивает 
обнаружение аномалий и анализ инцидентов для уменьшения шума оповещения 
и выявления критических проблем. 
● 
Информационные панели и визуализация данных: New Relic 
предоставляет настраиваемые информационные панели для визуализации, 
анализа и совместного использования данных на платформе. Он предлагает 
множество типов диаграмм, параметров фильтрации и функций настройки. 
● 
Мониторинг журналов: New Relic предлагает интегрированный 
мониторинг журналов, позволяющий вам связывать журналы с другими 
данными телеметрии, такими как метрики, трассировки и события, для более 
целостного наблюдения. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 251 _______________________________ 
● 
Доступ к API: New Relic также предоставляет API-интерфейсы, 
которые позволяют пользователям программно взаимодействовать со своими 
данными, 
интегрироваться 
с 
другими 
сервисами 
и 
настраивать 
функциональность платформы New Relic. 
На рисунке ниже представлена панель управления New Relic: 
 
 
Рисунок 2. Панель управления New Relic (Источник: веб-сайт New Relic) 
Figure 2. New Relic Control Panel (Source: New Relic website) 
 
3. 
Datadog. 
Полнофункциональный 
сервис 
мониторинга 
производительности 
приложений 
(APM), 
который 
предоставляет 
ряд 
функциональных 
возможностей 
для 
отслеживания 
и 
оптимизации 
производительности вашего приложения [7]. Вот некоторые из ключевых 
особенностей и функциональных возможностей Datadog: 
● 
Визуализация данных в реальном времени: Информационные панели 
Datadog предоставляют показатели в реальном времени с высоким разрешением 
для приложений, инфраструктуры и бизнеса. Эти информационные панели 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 252 _______________________________ 
настраиваемы, что упрощает отслеживание показателей, наиболее важных для 
команды [8]. 
На рисунке ниже проиллюстрирована визуализация всех трассировок 
стека в одном месте с помощью сервиса Datadog: 
 
 
Рисунок 3. Визуализация трассировок стека с помощью сервиса Datadog 
Figure 3. Visualization of stack traces using the Datadog service 
 
● 
Мониторинг производительности приложений (APM): Datadog APM 
обеспечивает сквозную видимость приложений. Он отслеживает запросы от 
начала до конца в распределенных системах и предоставляет подробные графики 
flame, которые помогают понять, как работает приложение и где возникают 
узкие места. 
● 
Мониторинг инфраструктуры: Datadog предоставляет более 450 
интеграций, которые собирают показатели с серверов, баз данных и других 
систем. Возможно визуализировать производительность инфраструктуры и 
оповещать о ней, а также соотносить это с данными о производительности 
приложения. 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 253 _______________________________ 
● 
Управление журналами: Datadog позволяет собирать, обрабатывать 
и анализировать данные журналов из приложений и инфраструктуры. Включает 
в себя функции для ведения журнала, аналитики, архивирования и регидратации. 
● 
Мониторинг производительности сети (NPM): NPM Datadog 
обеспечивает видимость сетевых данных, позволяя изучать исходящий и 
входящий трафик между хостами, контейнерами и службами для быстрого 
выявления узких мест или проблемных сетевых схем. 
● 
Мониторинг безопасности: Мониторинг безопасности Datadog 
позволяет в режиме реального времени обнаруживать угрозы в приложениях, 
сети и журналах. Есть возможность настроить запросы и оповещения, связанные 
с безопасностью, для обнаружения угроз и несанкционированного поведения. 
● 
Синтетический мониторинг: Эта функция позволяет проактивно 
тестировать пользовательские пути и API-интерфейсы с имитацией трафика, 
чтобы понять пользовательский интерфейс и выявить проблемы раньше, чем это 
сделают другие пользователи. 
● 
Управление инцидентами: Datadog предоставляет унифицированное 
представление показателей, трассировок и журналов, чтобы помочь быстрее 
обнаруживать, сортировать и разрешать инциденты. 
● 
Мониторинг пользовательского опыта: Отслеживая и анализируя 
реальные сеансы, Datadog может помочь понять, как производительность 
приложения влияет на работу конечного пользователя (рис. 4) [8]. 
 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 254 _______________________________ 
 
Рисунок 4. Панель аналитики долгосрочных тенденций производительности 
Figure 4. Analytics panel for long-term performance trends 
 
● 
Доступ к API: Datadog предоставляет API для настройки и 
автоматизации взаимодействий с платформой Datadog. 
В совокупности эти функции превращают Datadog в надежную 
комплексную платформу для мониторинга и оптимизации приложений и 
инфраструктуры. 
В заключение, мониторинг и анализ производительности является 
важнейшим аспектом оптимизации высоконагруженных приложений. Собирая 
данные и создавая визуализации, появляется возможность лучшего понимания, 
как приложение ведет себя под нагрузкой, и определить области, где 
оптимизация может оказать наибольшее влияние. 
 
Заключение 
Оптимизация высоконагруженных приложений - это многогранная 
область, которая охватывает несколько областей, включая оптимизацию кода и 
базы данных, балансировку нагрузки и оптимизацию на аппаратном уровне. В 
каждой из этих областей могут быть использованы различные стратегии и 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 255 _______________________________ 
методы для значительного повышения производительности приложений, 
сокращения задержек и улучшения пользовательского опыта. 
Например, улучшения алгоритмов и структуры данных имеют решающее 
значение для повышения эффективности приложения на уровне кода. 
Оптимизация базы данных, такая как индексация, оптимизация запросов и 
кэширование, имеет решающее значение для снижения ненужной нагрузки на 
базу данных и повышения скорости поиска данных. Эффективная балансировка 
нагрузки позволяет максимизировать пропускную способность, сократить время 
отклика и избежать перегрузки какого-либо отдельного ресурса. Наконец, 
оптимизация на аппаратном уровне, такая как выбор подходящих конфигураций 
серверов, процессоров и памяти, также является неотъемлемой частью 
повышения производительности. 
Более того, современные инструменты, такие как Prometheus, New Relic и 
Datadog, 
привнесли 
новое 
измерение 
в 
мониторинг 
и 
оптимизацию 
производительности приложений. Они не только дают представление о 
производительности приложений, но и помогают выявить узкие места, позволяя 
разработчикам 
активно 
устранять 
проблемы 
и 
оптимизировать 
производительность приложений. 
Тщательное согласование этих стратегий и методов, подкрепленное 
мониторингом и обратной связью с помощью надежных инструментов, может 
значительно повысить производительность высоконагруженных приложений, 
гарантируя, что они эффективно удовлетворяют растущим требованиям 
современного цифрового ландшафта.  
 
 
 
 
 
 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 256 _______________________________ 
СПИСОК ЛИТЕРАТУРЫ: 
 
1. 
Лащевски 
Т. 
Облачные 
архитектуры: 
разработка 
устойчивых 
и 
экономичных облачных приложений / Т. Лащевски, К. Арора, Э. Фарр, П. Зонуз. 
– СПб: ИД Питер, 2022. – 320 с. 
2. 
Гниденко И. Г. Технологии и методы программирования: учебное пособие 
для вузов / И. Г. Гниденко, Ф. Ф. Павлов, Д. Ю. Федоров. – М.: Издательство 
Юрайт, 2022. - 235 с. 
3. 
Зильберман, Н., Аудзевич, Ю., Ковингтон, Г. А., и Мур, А. Итог NetFPGA: 
Приближение к 100 Гбит/с в качестве исследовательского продукта / IEEE Micro, 
2014, 35 (5), стр. 32-41.  
4. 
Сассман 
А., 
Смелянский 
М., 
Дубей 
П. 
Жемчужины 
высокопроизводительного параллелизма, том 2: Многоядерные подходы к 
программированию / Морган Кауфман, 2015. - 592 с. 
5. 
Prometheus. Official website. [Электронный ресурс], URL: Prometheus - 
Monitoring system & time series database 
6. 
New Relic. (n.d.). Official website. [Электронный ресурс], URL: New Relic | 
Monitor, Debug and Improve Your Entire Stack 
7. 
Datadog. (n.d.). Official website. [Электронный ресурс], URL: Cloud 
Monitoring as a Service | Datadog (datadoghq.com) 
8. 
Кай Синь Тай. Анализ производительности кода в рабочей среде с 
помощью Datadog Continuous Profiler. Блог Datadog, 2020, [Электронный ресурс], 
URL: https://www.datadoghq.com/blog/datadog-continuous-profiler/ 
 
 
 
 
 
 
Международный научный журнал «ВЕСТНИК НАУКИ» № 7 (64) Т.3 .............................. ИЮЛЬ 2023 г. 
_______________________________________________________________________________________ 
_________________________________ 257 _______________________________ 
Filisov D.A. 
team leader of Grid Dynamics  
(Belgrade, Serbia) 
 
OPTIMIZATION STRATEGIES FOR HIGH-LOAD APPLICATIONS: 
ENHANCING OVERALL PERFORMANCE EFFICIENCY 
 
Abstract: this article provides a detailed examination of optimization strategies for highload applications, critical for enhancing overall performance efficiency. In the face of a rapidly 
growing digital user base, high-load applications - those capable of handling from thousands to 
millions of requests per minute - require fine-tuning to meet escalating demand. Various optimization 
methods and strategies necessary for improving the performance of these high-load applications are 
also discussed. Initially, the importance of code optimization is analyzed, from crafting efficient 
algorithms to employing correct data structures, highlighting its impact on reducing the 
computational complexity of applications. The relevance of database optimization is further 
discussed, and methods such as indexing, caching, and query optimization are explored, playing a 
vital role in enhancing database response time and hence application performance. The influence of 
effective load balancing on efficient network traffic distribution, thus preventing system overloads, is 
also examined. Modern tools such as Prometheus, New Relic, and Datadog are extensively discussed, 
shedding light on their transformative role in application performance monitoring and optimization. 
With these aspects of application optimization, the article provides a comprehensive guide to refining 
high-load applications, ensuring they cater to user needs efficiently, effectively, and reliably. 
 
Keywords: high-load applications, performance optimization, code optimization, database 
optimization, load balancing, hardware-level optimization, algorithm efficiency, data structures, 
indexing, caching, query optimization, network traffic, resource utilization, server configuration. 
 
 
